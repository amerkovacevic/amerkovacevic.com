// firestore.rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper
    function isSignedIn() { return request.auth != null; }

    function hasOnlyFields(data, fields) {
      return data.keys().hasOnly(fields);
    }

    function hasAllFields(data, fields) {
      return data.keys().hasAll(fields);
    }

    function isStringWithMax(value, maxLength) {
      return value is string && value.size() > 0 && value.size() <= maxLength;
    }

    function isOptionalDateKey(value) {
      return value == null || (value is string && value.matches('^\\d{4}-\\d{2}-\\d{2}$'));
    }

    function isNonNegativeNumber(value, maxValue) {
      return value is number && value >= 0 && value <= maxValue;
    }

    function isOptionalTimestamp(value) {
      return value == null || value is timestamp || value == request.time;
    }

    function listOfStrings(values, maxLength, maxItems) {
      return values is list
        && values.size() <= maxItems
        && values.where(item, !(item is string && item.size() > 0 && item.size() <= maxLength)).size() == 0;
    }

    function mapOfNumberValues(values, maxItems, maxValue) {
      return values is map
        && values.keys().size() <= maxItems
        && values.values().where(value, !(value is number && value >= 0 && value <= maxValue)).size() == 0;
    }

    function mapOfResultValues(values, maxItems) {
      return values is map
        && values.keys().size() <= maxItems
        && values.values().where(value, !(value == 'win' || value == 'loss')).size() == 0;
    }

    function isValidGauntletLeaderboard(data) {
      return hasOnlyFields(data, ['displayName', 'seasonScore', 'bestRun', 'currentStreak', 'lastPlayedOn'])
        && hasAllFields(data, ['displayName', 'seasonScore', 'bestRun'])
        && isStringWithMax(data.displayName, 80)
        && isNonNegativeNumber(data.seasonScore, 100000)
        && isNonNegativeNumber(data.bestRun, 1000)
        && (!data.keys().hasAny(['currentStreak']) || isNonNegativeNumber(data.currentStreak, 1000))
        && (!data.keys().hasAny(['lastPlayedOn']) || isOptionalTimestamp(data.lastPlayedOn));
    }

    function isValidGauntletProfile(data) {
      return hasOnlyFields(data, [
          'displayName',
          'activeDailyKey',
          'todaysCompleted',
          'todaysScore',
          'scoreByGame',
          'resultsByGame',
          'currentStreak',
          'bestStreak',
          'totalGauntlets',
          'lastPlayedOn'
        ])
        && hasAllFields(data, [
          'displayName',
          'activeDailyKey',
          'todaysCompleted',
          'todaysScore',
          'scoreByGame',
          'resultsByGame',
          'currentStreak',
          'bestStreak',
          'totalGauntlets'
        ])
        && isStringWithMax(data.displayName, 80)
        && isOptionalDateKey(data.activeDailyKey)
        && listOfStrings(data.todaysCompleted, 60, 15)
        && isNonNegativeNumber(data.todaysScore, 5000)
        && mapOfNumberValues(data.scoreByGame, 20, 1000)
        && mapOfResultValues(data.resultsByGame, 20)
        && isNonNegativeNumber(data.currentStreak, 365)
        && isNonNegativeNumber(data.bestStreak, 365)
        && isNonNegativeNumber(data.totalGauntlets, 10000)
        && (!data.keys().hasAny(['lastPlayedOn']) || isOptionalTimestamp(data.lastPlayedOn));
    }

    // -------------------------
    // Users
    // -------------------------
    match /users/{uid} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && request.auth.uid == uid;
    }

    // -------------------------
    // Fields (pickup)
    // -------------------------
    match /fields/{fieldId} {
      allow read: if true;
      allow write: if isSignedIn();
    }

    // -------------------------
    // Games (pickup)
    // -------------------------
    match /games/{gameId} {
      allow read: if true;

      allow create: if isSignedIn()
        && request.resource.data.organizerUid == request.auth.uid
        && request.resource.data.maxPlayers >= 2
        && request.resource.data.maxPlayers <= 30
        && request.resource.data.status == "open";

      allow update, delete: if isSignedIn()
        && resource.data.organizerUid == request.auth.uid;
    }

    function hasValidGuests(data) {
      return !data.keys().hasAny(["guests"]) ||
        (data.guests is int && data.guests >= 0 && data.guests <= 3);
    }

    match /games/{gameId}/rsvps/{uid} {
      allow read: if true;
      allow create, update: if isSignedIn()
        && request.auth.uid == uid
        && hasValidGuests(request.resource.data);
      allow delete: if isSignedIn() && request.auth.uid == uid;
    }

    // -------------------------
    // Secret Santa (soccer jerseys)
    // Path shape:
    // /santaEvents/{eventId}
    //   /members/{uid}
    //   /assignments/{giverUid}
    // -------------------------
    match /santaEvents/{eventId} {
      // Event document (metadata like name, budget, exchangeDate, joinCode, organizerUid)
      // Public read is fine for simple use; switch to "isSignedIn()" if you want only signed-in users to see.
      allow read: if isSignedIn();

      // Only a signed-in user can create an event, and they must be the organizer in the document they write.
      allow create: if isSignedIn()
        && request.resource.data.organizerUid == request.auth.uid;

      // Only the organizer can update/delete the event document.
      allow update, delete: if isSignedIn()
        && resource.data.organizerUid == request.auth.uid;

      // Members: everyone can see who joined; each user can only write their own member doc.
      match /members/{uid} {
        allow read: if true;
        allow create, update, delete: if isSignedIn() && request.auth.uid == uid;
      }

      // Assignments: each giver can read ONLY their own assignment.
      // Only the organizer can write assignments during the draw.
      match /assignments/{giverUid} {
        allow read: if isSignedIn() && request.auth.uid == giverUid;
        allow create, update, delete: if isSignedIn()
          && get(/databases/$(database)/documents/santaEvents/$(eventId)).data.organizerUid == request.auth.uid;
      }
    }

    // -------------------------
    // Amer Gauntlet
    // -------------------------
    match /amerGauntletDaily/{dailyId} {
      allow read: if true;
    }

    match /amerGauntletHistory/{entryId} {
      allow read: if true;
    }

    match /amerGauntletLeaderboards/{uid} {
      allow read: if true;
      allow write: if isSignedIn()
        && request.auth.uid == uid
        && isValidGauntletLeaderboard(request.resource.data);
    }

    match /amerGauntletProfiles/{uid} {
      allow read, write: if isSignedIn()
        && request.auth.uid == uid
        && isValidGauntletProfile(request.resource.data);
    }

  }
}
